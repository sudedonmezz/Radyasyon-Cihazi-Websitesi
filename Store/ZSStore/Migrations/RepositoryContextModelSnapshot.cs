// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

#nullable disable

namespace ZSStore.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.Property<int>("CartLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartLineId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartLine");
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryDescription = "",
                            CategoryName = "Elektronik Dozimetre"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryDescription = "",
                            CategoryName = "Pasif Dozimetre"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryDescription = "",
                            CategoryName = "Survey Metre"
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryDescription = "",
                            CategoryName = "Yüzey Kontaminasyon Ölçer"
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryDescription = "",
                            CategoryName = "Alan Monitörü"
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryDescription = "",
                            CategoryName = "Baca Dedektör"
                        });
                });

            modelBuilder.Entity("Entities.Models.ContactMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ContactMessages");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Line1")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Line2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Line3")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Shipped")
                        .HasColumnType("INTEGER");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductDocumentsPath")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductTechnicalSpecs")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductUsageAreas")
                        .HasColumnType("TEXT");

                    b.Property<double?>("ProductWeight")
                        .HasColumnType("REAL");

                    b.Property<bool>("ShowCase")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            ImageUrl = "/images/1.jpg",
                            ProductDescription = "Kişisel radyasyon dozimetresi; Geiger-Müller tüpü ile gama ve X-ışını tespiti yapar.",
                            ProductDocumentsPath = "/documents/geiger-dokuman.pdf",
                            ProductName = "Geiger Müller Tabanlı Elektronik Dozimetre",
                            ProductPrice = 7500m,
                            ProductTechnicalSpecs = "Dedektör: Geiger-Müller tüpü, Enerji Aralığı: 50 keV – 3 MeV, Ekran: LCD, Alarm: Sesli ve titreşimli",
                            ProductUsageAreas = "Nükleer tesisler, hastaneler, radyasyon güvenliği uygulamaları",
                            ProductWeight = 0.29999999999999999,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            ImageUrl = "/images/2.jpg",
                            ProductDescription = "Yüksek hassasiyetli kişisel dozimetre; düşük doz tespiti yapar.",
                            ProductDocumentsPath = "/documents/katihal-dokuman.pdf",
                            ProductName = "Katı Hal Dedektörlü Elektronik Dozimetre",
                            ProductPrice = 8900m,
                            ProductTechnicalSpecs = "Dedektör: Katı hal dedektörü, Enerji Aralığı: 50 keV – 3 MeV, Ekran: LCD, Alarm: Sesli ve titreşimli",
                            ProductUsageAreas = "Nükleer enerji santralleri, tıbbi görüntüleme merkezleri",
                            ProductWeight = 0.25,
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 2,
                            ImageUrl = "/images/3.jpg",
                            ProductDescription = "Geniş bantlı OSL dozimetri sistemi; farklı radyasyon türlerine karşı hassasiyet sağlar.",
                            ProductDocumentsPath = "/documents/wbext-osl.pdf",
                            ProductName = "Wbext OSL Dozimetri",
                            ProductPrice = 2000m,
                            ProductTechnicalSpecs = "Dedektör: Geniş bant OSL, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Nükleer tesisler, araştırma laboratuvarları",
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2,
                            ImageUrl = "/images/4.jpg",
                            ProductDescription = "Hastaların maruz kaldığı radyasyon dozunu ölçmek için kullanılan OSL dozimetresi.",
                            ProductDocumentsPath = "/documents/hasta-osl.pdf",
                            ProductName = "Hasta OSL Dozimetri-MOSFET",
                            ProductPrice = 1800m,
                            ProductTechnicalSpecs = "Dedektör: Alümina tabanlı OSL, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Radyoterapi, nükleer tıp uygulamaları",
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            ImageUrl = "/images/5.jpg",
                            ProductDescription = "Ellerde ve bileklerde maruz kalınan radyasyon dozunu ölçmek için kullanılan OSL dozimetresi.",
                            ProductDocumentsPath = "/documents/ekstremite-osl.pdf",
                            ProductName = "Bilek Dozimetre",
                            ProductPrice = 1600m,
                            ProductTechnicalSpecs = "Dedektör: Alümina tabanlı OSL, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Nükleer tıp, radyoloji bölümleri",
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 2,
                            ImageUrl = "/images/6.jpg",
                            ProductDescription = "Ellerde ve bileklerde maruz kalınan radyasyon dozunu ölçmek için kullanılan OSL dozimetresi.",
                            ProductDocumentsPath = "/documents/ekstremite-osl.pdf",
                            ProductName = "Tüm Vücut Dozimetre",
                            ProductPrice = 1600m,
                            ProductTechnicalSpecs = "Dedektör: Alümina tabanlı OSL, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Nükleer tıp, radyoloji bölümleri",
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 2,
                            ImageUrl = "/images/7.jpg",
                            ProductDescription = "Ellerde ve bileklerde maruz kalınan radyasyon dozunu ölçmek için kullanılan OSL dozimetresi.",
                            ProductDocumentsPath = "/documents/ekstremite-osl.pdf",
                            ProductName = "Yüzük Dozimetre",
                            ProductPrice = 1600m,
                            ProductTechnicalSpecs = "Dedektör: Alümina tabanlı OSL, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Nükleer tıp, radyoloji bölümleri",
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 2,
                            ImageUrl = "/images/8.jpg",
                            ProductDescription = "Ellerde ve bileklerde maruz kalınan radyasyon dozunu ölçmek için kullanılan OSL dozimetresi.",
                            ProductDocumentsPath = "/documents/ekstremite-osl.pdf",
                            ProductName = "Göz(Lens) Dozimetre",
                            ProductPrice = 1600m,
                            ProductTechnicalSpecs = "Dedektör: Alümina tabanlı OSL, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Nükleer tıp, radyoloji bölümleri",
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2,
                            ImageUrl = "/images/9.jpg",
                            ProductDescription = "Ellerde ve bileklerde maruz kalınan radyasyon dozunu ölçmek için kullanılan OSL dozimetresi.",
                            ProductDocumentsPath = "/documents/ekstremite-osl.pdf",
                            ProductName = "Ortam Dozimetresi",
                            ProductPrice = 1600m,
                            ProductTechnicalSpecs = "Dedektör: Alümina tabanlı OSL, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Nükleer tıp, radyoloji bölümleri",
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 2,
                            ImageUrl = "/images/10.jpg",
                            ProductDescription = "Nötron radyasyonuna maruz kalınan dozları ölçmek için kullanılan sistem.",
                            ProductDocumentsPath = "/documents/notron.pdf",
                            ProductName = "Nötron Dozimetre",
                            ProductPrice = 3500m,
                            ProductTechnicalSpecs = "Dedektör: Nötron hassas dedektör, Enerji Aralığı: Termal – 15 MeV",
                            ProductUsageAreas = "Nükleer reaktörler, araştırma laboratuvarları",
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 2,
                            ImageUrl = "/images/11.jpg",
                            ProductDescription = "Radon gazına maruz kalınan dozları ölçmek için kullanılan sistem.",
                            ProductDocumentsPath = "/documents/radon.pdf",
                            ProductName = "Radon Dozimetre",
                            ProductPrice = 2800m,
                            ProductTechnicalSpecs = "Dedektör: Radon hassas dedektör, Enerji Aralığı: 5 keV – 40 MeV",
                            ProductUsageAreas = "Yer altı madenleri, evler, ofisler",
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 3,
                            ImageUrl = "/images/12.jpg",
                            ProductDescription = "Çevresel radyasyon seviyelerini ölçmek için kullanılan taşınabilir cihaz.",
                            ProductDocumentsPath = "/documents/gm-survey.pdf",
                            ProductName = "Geiger Müller Tabanlı Survey Metre",
                            ProductPrice = 11000m,
                            ProductTechnicalSpecs = "Dedektör: Geiger-Müller tüp, Enerji Aralığı: 30 keV – 3 MeV",
                            ProductUsageAreas = "Sanayi, çevre izleme, sağlık fizik laboratuvarları",
                            ProductWeight = 1.2,
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 3,
                            ImageUrl = "/images/13.jpg",
                            ProductDescription = "Katı hal dedektörlü gelişmiş survey metre.",
                            ProductDocumentsPath = "/documents/katihal-survey.pdf",
                            ProductName = "Katı Hal Dedektörlü Survey Metre",
                            ProductPrice = 13500m,
                            ProductTechnicalSpecs = "Dedektör: Katı hal dedektör, Enerji Aralığı: 30 keV – 3 MeV",
                            ProductUsageAreas = "Nükleer tesisler, laboratuvarlar",
                            ProductWeight = 1.1000000000000001,
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 4,
                            ImageUrl = "/images/14.jpg",
                            ProductDescription = "Yüzeylerdeki alfa, beta kontaminasyonunu tespit eder.",
                            ProductDocumentsPath = "/documents/yuzey.pdf",
                            ProductName = "Yüzey Kontaminasyon Ölçer",
                            ProductPrice = 9900m,
                            ProductTechnicalSpecs = "Dedektör: Plastik scinitillation, Enerji Aralığı: 20 keV – 2 MeV",
                            ProductUsageAreas = "Laboratuvarlar, hastaneler, sınır güvenliği",
                            ProductWeight = 0.90000000000000002,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 5,
                            ImageUrl = "/images/15.jpg",
                            ProductDescription = "Sabit olarak kurulan alan monitörü; gamma radyasyon takibi yapar.",
                            ProductDocumentsPath = "/documents/alan-monitor-gm.pdf",
                            ProductName = "Geiger Müller Tabanlı Radyasyon Alan Monitörü",
                            ProductPrice = 12500m,
                            ProductTechnicalSpecs = "Dedektör: GM tüp, Aralık: 50 keV – 3 MeV, Çıkış: Analog/dijital",
                            ProductUsageAreas = "Nükleer reaktörler, sınır kapıları",
                            ProductWeight = 1.3999999999999999,
                            ShowCase = true
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 5,
                            ImageUrl = "/images/16.jpg",
                            ProductDescription = "Yüksek hassasiyetli sabit radyasyon izleme cihazı.",
                            ProductDocumentsPath = "/documents/alan-monitor-katihal.pdf",
                            ProductName = "Katı Hal Dedektörlü Radyasyon Alan Monitörü",
                            ProductPrice = 13900m,
                            ProductTechnicalSpecs = "Dedektör: Katı hal dedektör, Aralık: 50 keV – 3 MeV",
                            ProductUsageAreas = "Nükleer alanlar, tıbbi merkezler",
                            ProductWeight = 1.3,
                            ShowCase = false
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 6,
                            ImageUrl = "/images/17.jpg",
                            ProductDescription = "Bacadan yayılan radyoaktif partikülleri tespit eden cihaz.",
                            ProductDocumentsPath = "/documents/baca.pdf",
                            ProductName = "Baca Dedektör",
                            ProductPrice = 17500m,
                            ProductTechnicalSpecs = "Dedektör: Partikül sayım dedektörü, Aralık: 0.1 µCi/m3 – 100 µCi/m3",
                            ProductUsageAreas = "Nükleer santraller, filtre izleme sistemleri",
                            ProductWeight = 2.0,
                            ShowCase = true
                        });
                });

            modelBuilder.Entity("Entities.Models.ProductAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductAnalyses", (string)null);
                });

            modelBuilder.Entity("Entities.Models.SupportMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SupportMessages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fe52d7d2-1d7b-45a6-86e6-dc281c5b5ecd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "20e28613-d581-48a7-84c9-5c9cfbb572ae",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "a007bf31-08b6-47be-a9b7-88f1c1a551a3",
                            Name = "Editor",
                            NormalizedName = "EDITOR"
                        },
                        new
                        {
                            Id = "8095db8f-1ce7-42b8-8db3-f260891be148",
                            Name = "Technical",
                            NormalizedName = "TECHNICAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.CartLine", b =>
                {
                    b.HasOne("Entities.Models.Order", null)
                        .WithMany("Lines")
                        .HasForeignKey("OrderId");

                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.HasOne("Entities.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Entities.Models.ProductAnalysis", b =>
                {
                    b.HasOne("Entities.Models.Product", "Product")
                        .WithMany("Analyses")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("Entities.Models.Product", b =>
                {
                    b.Navigation("Analyses");
                });
#pragma warning restore 612, 618
        }
    }
}
